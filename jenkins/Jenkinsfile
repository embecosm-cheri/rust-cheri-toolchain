properties([parameters([
    string(defaultValue: 'main', description: 'Toolchain Branch Name', name: 'ToolchainBranchName'),
    string(defaultValue: 'main', description: 'Cheribuild Branch Name', name: 'CheribuildBranchName'),
    string(defaultValue: 'rust-cheri-1.67.0', description: 'Rust Branch Name', name: 'RustBranchName'),
    booleanParam(defaultValue: false, description: 'Archive a Copy of the Built Toolchain', name: 'ArchiveToolchain'),
    booleanParam(defaultValue: true, description: 'Run Rust Compilation Tests', name: 'RustCompileTests'),
    booleanParam(defaultValue: true, description: 'Run Rust Execution Tests', name: 'RustExecuteTests'),
])])

String JobName = ""
if (params.RustBranchName != 'rust-cheri-1.67.0') {
  if (JobName != "") JobName = JobName + ','; JobName = JobName + 'rust-cheri:' + params.RustBranchName
}

node('builder') {
  stage('Cleanup') {
    deleteDir()
  }

  stage('Checkout') {
    dir('toolchain') {
      checkout scm
    }
    image = docker.build('vigilance-morello-buildenv',
                         '-f toolchain/jenkins/Dockerfile toolchain/jenkins')
    image.inside {
      dir('toolchain') {
        sh script: '''./scripts/clone.sh'''
        sh script: '''./scripts/checkout.sh \
                      --toolchain-branch=${ToolchainBranchName} \
                      --cheribuild-branch=${CheribuildBranchName} \
                      --rust-branch=${RustBranchName}'''
      }
    }
  }

  stage('Build') {
    timeout(120) {
      try {
        image.inside {
          dir ('toolchain') {
            // cheribuild places its outputs in the HOME directory, but on
            // Jenkins that's not part of the workspace. Set HOME to the Jenkins
            // workspace directory instead.
            withEnv(['HOME=/home/jenkins/workspace/vigilance-test']) {
              sh script: '''./scripts/build.sh'''
            }
          }
          if (params.ArchiveToolchain) {
            dir ('cheri/output') {
              sh '''tar -czvf sdk.tar.gz morello-sdk/*'''
              sh '''tar -czvf rootfs.tar.gz rootfs-morello-purecap/*'''
            }
            dir ('rust') {
              sh '''tar -czvf rust.tar.gz build/*/stage1*/*'''
            }
          }
        }
      }
      catch (Exception e) {}
      finally {
        if (params.ArchiveToolchain) {
          archiveArtifacts allowEmptyArchive: true, fingerprint: true,
            artifacts: 'rust/rust.tar.gz, cheri/output/sdk.tar.gz, cheri/output/rootfs.tar.gz'
        }
      }
    }
  }

  stage('Compilation Tests') {
    if (params.RustCompileTests) {
      timeout(60) {
        try {
          image.inside {
            dir ('toolchain') {
              withEnv(['HOME=/home/jenkins/workspace/vigilance-test']) {
                sh script: '''./scripts/test-compilation.sh'''
              }
            }
          }
        }
        catch (Exception e) {}
        finally {
          archiveArtifacts allowEmptyArchive: true, fingerprint: true,
            artifacts: 'toolchain/test-output/compilation*'
        }
      }
    }
  }

  stage('Execution Tests') {
    if (params.RustExecuteTests) {
      timeout(60) {
        try {
          image.inside {
            dir ('toolchain') {
              withEnv(['HOME=/home/jenkins/workspace/vigilance-test']) {
                sh script: '''./scripts/test-execution.sh'''
              }
            }
          }
        }
        catch (Exception e) {}
        finally {
          archiveArtifacts allowEmptyArchive: true, fingerprint: true,
            artifacts: 'toolchain/test-output/execution*'
        }
      }
    }
  }
}
